package com.cssl.ctp.il.wsdl.il_availability_v1;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPHeader;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.handler.Handler;
import javax.xml.ws.handler.HandlerResolver;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.PortInfo;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;

import com.skilrock.lms.common.utility.PropertyLoader;



/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.3-hudson-390-
 * Generated source version: 2.0
 * <p>
 * An example of how this class may be used:
 * 
 * <pre>
 * AvailabilityBinding_v1_0 service = new AvailabilityBinding_v1_0();
 * AvailabilityPortTypeV10 portType = service.getPARTNER();
 * portType.availability(...);
 * </pre>
 * 
 * </p>
 * 
 */
@WebServiceClient(name = "AvailabilityBinding_v1_0", targetNamespace = "http://ctp.cssl.com/il/wsdl/Availability-v1", wsdlLocation = "")
public class AvailabilityBindingV10 extends Service implements SOAPHandler<SOAPMessageContext>, HandlerResolver{

	private final static URL AVAILABILITYBINDINGV10_WSDL_LOCATION;
	private final static Logger logger = Logger
			.getLogger(com.cssl.ctp.il.wsdl.il_availability_v1.AvailabilityBindingV10.class
					.getName());
	private final static String wsdlPath;
	
	static {
		PropertyLoader.loadProperties("config/LMS.properties");
		wsdlPath = PropertyLoader.getProperty("CTP_WSDL_PATH");
		URL url = null;
		try {
			URL baseUrl;
			baseUrl = com.cssl.ctp.il.wsdl.il_availability_v1.AvailabilityBindingV10.class
					.getResource(".");
			url = new URL(baseUrl,
					wsdlPath+"Availability-v1.wsdl");
		} catch (MalformedURLException e) {
			logger
					.warning("Failed to create URL for the wsdl Location: '"+ wsdlPath +"Availability-v1.wsdl', retrying as a local file");
			logger.warning(e.getMessage());
		}
		AVAILABILITYBINDINGV10_WSDL_LOCATION = url;
	}

	public AvailabilityBindingV10(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public AvailabilityBindingV10() {
		super(AVAILABILITYBINDINGV10_WSDL_LOCATION, new QName(
				"http://ctp.cssl.com/il/wsdl/Availability-v1",
				"AvailabilityBinding_v1_0"));
		this.setHandlerResolver(this);
	}

	/**
	 * 
	 * @return returns AvailabilityPortTypeV10
	 */
	@WebEndpoint(name = "PARTNER")
	public AvailabilityPortTypeV10 getPARTNER() {
		return super.getPort(new QName(
				"http://ctp.cssl.com/il/wsdl/Availability-v1", "PARTNER"),
				AvailabilityPortTypeV10.class);
	}

	public Set<QName> getHeaders() {
		// TODO Auto-generated method stub
		return null;
	}

	public void close(MessageContext context) {
		// TODO Auto-generated method stub
		
	}

	public boolean handleFault(SOAPMessageContext context) {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean handleMessage(SOAPMessageContext context) {

		Boolean outboundProperty = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);

        if (outboundProperty.booleanValue()) {

            //SOAPMessage message = context.getMessage();

            try {

                SOAPEnvelope envelope = context.getMessage().getSOAPPart().getEnvelope();
                SOAPHeader header = envelope.getHeader();

                SOAPElement security =
                        header.addChildElement("Security", "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");

                SOAPElement usernameToken =
                        security.addChildElement("UsernameToken", "wsse");
                usernameToken.addAttribute(new QName("xmlns:wsu"), "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");

                SOAPElement username =
                        usernameToken.addChildElement("Username", "wsse");
                username.addTextNode("67b8c439add16df4280faf529963d3927f94a51d");

                SOAPElement password =
                        usernameToken.addChildElement("Password", "wsse");
                password.setAttribute("Type", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText");
               password.addTextNode("ee8d9bb3923d3562a288761b6b81f160b6cf75d4");

                //Print out the outbound SOAP message to System.out
                /*message.writeTo(System.out);
                System.out.println("");*/
                
            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            try {
                
                //This handler does nothing with the response from the Web Service so
                //we just print out the SOAP message.
                /*SOAPMessage message = context.getMessage();
                message.writeTo(System.out);
                System.out.println("");*/

            } catch (Exception ex) {
                ex.printStackTrace();
            } 
        }
		
		/*The Following code is to write a DOMSource to any output stream*/
		TransformerFactory tFactory =
		    TransformerFactory.newInstance();
		try{
		  Transformer transformer = tFactory.newTransformer();

		  DOMSource source = new DOMSource(context.getMessage().getSOAPPart());
		  System.out.println("");
		  StreamResult result = new StreamResult(System.out);
		  transformer.transform(source, result);
		  System.out.println("");
		}catch(Exception e){
			e.printStackTrace();
		}
		return outboundProperty;
	
	}

	public List<Handler> getHandlerChain(PortInfo portInfo) {
		List<Handler> handlerChain = new ArrayList<Handler>();
	     handlerChain.add(this);
	     return handlerChain;
	}

}
