package com.skilrock.lms.common.utility;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.skilrock.lms.common.db.DBConnect;
import com.skilrock.lms.common.exception.LMSErrors;
import com.skilrock.lms.common.exception.LMSException;

public class GenerateRecieptNo {
	static Log logger = LogFactory.getLog(GenerateRecieptNo.class);

	public synchronized static String generateRequestId(String recieptType)
			throws LMSException {
		String autoGeneratedNo = null;

		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) + 1;
		String monthString = null;
		if (month < 10) {
			monthString = "0" + month;
		} else {
			monthString = "" + month;
		}
		String lastRecieptGenerated = null;
		// get the last request number generated
		 
		Connection con = null;
		Statement stmt = null;
		try {
			con = DBConnect.getConnection();
			stmt = con.createStatement();
			String getLastReqNo = "select request_id from st_se_pwt_approval_request_master order by request_id desc limit 1 ";
			ResultSet rs = stmt.executeQuery(getLastReqNo);
			if (rs.next()) {
				lastRecieptGenerated = rs.getString("request_id");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		String lastTwoDigitsYr = ("" + year).substring(2, 4);
		// String oneCharOfUserType=userType.substring(0, 1);
		// get initial two digits for starting two digits of reciept type

		String startThreeDigitsForType = recieptType.substring(0, 3);
		int monthForLastRecieptNo = 0;
		if (lastRecieptGenerated != null) {
			monthForLastRecieptNo = Integer.parseInt(lastRecieptGenerated
					.substring(5, 7));
		}

		// get last generated number

		if (lastRecieptGenerated == null) {

			autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr
					+ monthString + "000001";
			return autoGeneratedNo;

		} else if (monthForLastRecieptNo != month) {
			autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr
					+ monthString + "000001";
			return autoGeneratedNo;

		}

		String lastGeneratedNumber = lastRecieptGenerated.substring(7);
		int nextGeneratedNumber = Integer.parseInt(lastGeneratedNumber) + 1;
		String nextGeneratedNumberString = "" + nextGeneratedNumber;
		while (nextGeneratedNumberString.length() < lastGeneratedNumber
				.length()) {
			nextGeneratedNumberString = "0" + nextGeneratedNumberString;
			logger.debug(nextGeneratedNumberString);
		}

		// make the whole reciept number

		autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr
				+ monthString + nextGeneratedNumberString;
		return autoGeneratedNo;

	}

	public synchronized static String generateRequestIdSLE(String recieptType, Connection connection) throws LMSException {
		String autoGeneratedNo = null;

		Calendar cal = Calendar.getInstance();
		int month = cal.get(Calendar.MONTH) + 1;
		int year = cal.get(Calendar.YEAR);
		String monthString = (month < 10) ? ("0"+month) : String.valueOf(month);

		String lastRecieptGenerated = null;

		Statement stmt = null;
		ResultSet rs = null;
		try {
			stmt = connection.createStatement();
			String getLastReqNo = "SELECT request_id FROM st_sle_approval_req_master ORDER BY request_id DESC LIMIT 1;";
			rs = stmt.executeQuery(getLastReqNo);
			if (rs.next()) {
				lastRecieptGenerated = rs.getString("request_id");
			}
		} catch (SQLException se) {
			se.printStackTrace();
			throw new LMSException(LMSErrors.SQL_EXCEPTION_ERROR_CODE);
		}

		String lastTwoDigitsYr = String.valueOf(year).substring(2, 4);
		String startThreeDigitsForType = recieptType.substring(0, 3);

		int monthForLastRecieptNo = (lastRecieptGenerated != null) ? Integer.parseInt(lastRecieptGenerated.substring(5, 7)) : 0;

		if (lastRecieptGenerated == null) {
			autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr + monthString + "000001";
			return autoGeneratedNo;
		} else if (monthForLastRecieptNo != month) {
			autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr + monthString + "000001";
			return autoGeneratedNo;
		}

		String lastGeneratedNumber = lastRecieptGenerated.substring(7);
		String nextGeneratedNumberString = String.valueOf(Integer.parseInt(lastGeneratedNumber) + 1);
		while (nextGeneratedNumberString.length() < lastGeneratedNumber.length()) {
			nextGeneratedNumberString = "0" + nextGeneratedNumberString;
		}

		autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr + monthString + nextGeneratedNumberString;

		return autoGeneratedNo;
	}

	public synchronized static String generateRequestIdDraw(String recieptType)
			throws LMSException {
		String autoGeneratedNo = null;

		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) + 1;
		String monthString = null;
		if (month < 10) {
			monthString = "0" + month;
		} else {
			monthString = "" + month;
		}
		String lastRecieptGenerated = null;
		// get the last request number generated
		Connection con = null;
		Statement stmt = null;
		try {
			con = DBConnect.getConnection();
			stmt = con.createStatement();
			String getLastReqNo = "select request_id from st_dg_approval_req_master order by request_id desc limit 1 ";
			ResultSet rs = stmt.executeQuery(getLastReqNo);
			if (rs.next()) {
				lastRecieptGenerated = rs.getString("request_id");
			}
			DBConnect.closeCon(con);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		String lastTwoDigitsYr = ("" + year).substring(2, 4);
		// String oneCharOfUserType=userType.substring(0, 1);
		// get initial two digits for starting two digits of reciept type

		String startThreeDigitsForType = recieptType.substring(0, 3);
		int monthForLastRecieptNo = 0;
		if (lastRecieptGenerated != null) {
			monthForLastRecieptNo = Integer.parseInt(lastRecieptGenerated
					.substring(5, 7));
		}

		// get last generated number

		if (lastRecieptGenerated == null) {

			autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr
					+ monthString + "000001";
			return autoGeneratedNo;

		} else if (monthForLastRecieptNo != month) {
			autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr
					+ monthString + "000001";
			return autoGeneratedNo;

		}

		String lastGeneratedNumber = lastRecieptGenerated.substring(7);
		int nextGeneratedNumber = Integer.parseInt(lastGeneratedNumber) + 1;
		String nextGeneratedNumberString = "" + nextGeneratedNumber;
		while (nextGeneratedNumberString.length() < lastGeneratedNumber
				.length()) {
			nextGeneratedNumberString = "0" + nextGeneratedNumberString;
			logger.debug(nextGeneratedNumberString);
		}

		// make the whole reciept number

		autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr
				+ monthString + nextGeneratedNumberString;
		return autoGeneratedNo;

	}

	/*
	 * public synchronized static String getRecieptNoRet(String recieptType,
	 * String lastRecieptGenerated,String userType,int retOrgId) {
	 * 
	 * String autoGeneratedNo = null;
	 * 
	 * Calendar cal = Calendar.getInstance(); int year = cal.get(Calendar.YEAR);
	 * int month = cal.get(Calendar.MONTH) + 1; String monthString=null;
	 * if(month<10){ monthString="0"+month; } else monthString=""+month;
	 * 
	 * 
	 * String lastTwoDigitsYr = ("" + year).substring(2, 4); String
	 * oneCharOfUserType=userType.substring(0, 1);
	 * 
	 * int digitsOfretOrgId=(""+retOrgId).length();
	 * 
	 * //get initial two digits for starting two digits of reciept type
	 * 
	 * String startTwoDigitsForType = recieptType.substring(0, 2); int
	 * monthForLastRecieptNo=0; if(lastRecieptGenerated != null){
	 * monthForLastRecieptNo=Integer.parseInt(lastRecieptGenerated.substring(5+digitsOfretOrgId,
	 * 7+digitsOfretOrgId)); } logger.debug("cvxc " +monthForLastRecieptNo); //
	 * get last generated number
	 * 
	 * if ((lastRecieptGenerated == null)) {
	 * 
	 * autoGeneratedNo = startTwoDigitsForType
	 * +oneCharOfUserType+retOrgId+lastTwoDigitsYr + monthString + "00000001";
	 * return autoGeneratedNo; } else if(monthForLastRecieptNo != month){
	 * autoGeneratedNo = startTwoDigitsForType +oneCharOfUserType+retOrgId+
	 * lastTwoDigitsYr + monthString + "00000001"; return autoGeneratedNo; }
	 * 
	 * 
	 * 
	 * String lastGeneratedNumber =
	 * lastRecieptGenerated.substring(7+digitsOfretOrgId); int
	 * nextGeneratedNumber = Integer.parseInt(lastGeneratedNumber) + 1; String
	 * nextGeneratedNumberString = "" + nextGeneratedNumber; while
	 * (nextGeneratedNumberString.length() < lastGeneratedNumber .length()) {
	 * nextGeneratedNumberString = "0" + nextGeneratedNumberString;
	 * logger.debug(nextGeneratedNumberString); }
	 * 
	 * //make the whole reciept number
	 * 
	 * autoGeneratedNo = startTwoDigitsForType +oneCharOfUserType+retOrgId+
	 * lastTwoDigitsYr + monthString + nextGeneratedNumberString;
	 * //logger.debug("generated reciept number is " + autoGeneratedNo);
	 * 
	 * return autoGeneratedNo; }
	 */

	public synchronized static String getRecieptNo(String recieptType,
			String lastRecieptGenerated, String userType) {

		String autoGeneratedNo = null;

		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) + 1;
		String monthString = null;
		if (month < 10) {
			monthString = "0" + month;
		} else {
			monthString = "" + month;
		}

		String lastTwoDigitsYr = ("" + year).substring(2, 4);
		String oneCharOfUserType = userType.substring(0, 1);
		// get initial two digits for starting two digits of reciept type

		String startTwoDigitsForType = recieptType.substring(0, 2);
		int monthForLastRecieptNo = 0;
		if (lastRecieptGenerated != null) {
			monthForLastRecieptNo = Integer.parseInt(lastRecieptGenerated
					.substring(5, 7));

		}

		// get last generated number

		if (lastRecieptGenerated == null) {

			autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
					+ lastTwoDigitsYr + monthString + "000001";
			return autoGeneratedNo;

		} else if (monthForLastRecieptNo != month) {
			autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
					+ lastTwoDigitsYr + monthString + "000001";
			return autoGeneratedNo;

		}

		String lastGeneratedNumber = lastRecieptGenerated.substring(7);
		int nextGeneratedNumber = Integer.parseInt(lastGeneratedNumber) + 1;
		String nextGeneratedNumberString = "" + nextGeneratedNumber;
		while (nextGeneratedNumberString.length() < lastGeneratedNumber
				.length()) {
			nextGeneratedNumberString = "0" + nextGeneratedNumberString;
			logger.debug(nextGeneratedNumberString);
		}

		// make the whole reciept number

		autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
				+ lastTwoDigitsYr + monthString + nextGeneratedNumberString;
		// logger.debug("generated reciept number is " + autoGeneratedNo);

		return autoGeneratedNo;

	}

	public synchronized static String getRecieptNoAgt(String recieptType,
			String lastRecieptGenerated, String userType, int agtOrgId) {

		String autoGeneratedNo = null;

		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) + 1;
		String monthString = null;
		if (month < 10) {
			monthString = "0" + month;
		} else {
			monthString = "" + month;
		}

		String lastTwoDigitsYr = ("" + year).substring(2, 4);
		String oneCharOfUserType = userType.substring(0, 1);

		int digitsOfAgtOrgId = ("" + agtOrgId).length();

		// get initial two digits for starting two digits of reciept type

		String startTwoDigitsForType = recieptType.substring(0, 2);
		int monthForLastRecieptNo = 0;
		if (lastRecieptGenerated != null) {
			monthForLastRecieptNo = Integer.parseInt(lastRecieptGenerated
					.substring(5 + digitsOfAgtOrgId, 7 + digitsOfAgtOrgId));

		}
		logger.debug(lastRecieptGenerated + "*last receipt gen**" + month
				+ " Current Month cvxc " + monthForLastRecieptNo + "agent"
				+ digitsOfAgtOrgId + "orgid" + agtOrgId);

		// get last generated number

		if (lastRecieptGenerated == null) {

			autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
					+ agtOrgId + lastTwoDigitsYr + monthString + "000001";
			return autoGeneratedNo;

		} else if (monthForLastRecieptNo != month) {
			autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
					+ agtOrgId + lastTwoDigitsYr + monthString + "000001";
			return autoGeneratedNo;

		}

		String lastGeneratedNumber = lastRecieptGenerated
				.substring(7 + digitsOfAgtOrgId);
		int nextGeneratedNumber = Integer.parseInt(lastGeneratedNumber) + 1;
		String nextGeneratedNumberString = "" + nextGeneratedNumber;
		while (nextGeneratedNumberString.length() < lastGeneratedNumber
				.length()) {
			nextGeneratedNumberString = "0" + nextGeneratedNumberString;
			logger.debug(nextGeneratedNumberString);
		}

		// make the whole reciept number

		autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType + agtOrgId
				+ lastTwoDigitsYr + monthString + nextGeneratedNumberString;
		// logger.debug("generated reciept number is " + autoGeneratedNo);

		return autoGeneratedNo;

	}

	public static void main(String args[]) {
		GenerateRecieptNo x = new GenerateRecieptNo();
		logger.debug(GenerateRecieptNo.getRecieptNoAgt("INVOICE",
				"INA20901000001", "AGENT", 288));

	}

	public String generateReceipt(String receiptType, String receiptAtType,
			List<Integer> transIdList, int receiptAtOrgId,
			String lastRecieptGenerated, Connection connection) {

		String autoGeneratedNo = null;

		Calendar cal = Calendar.getInstance();
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) + 1;
		String monthString = null;
		if (month < 10) {
			monthString = "0" + month;
		} else {
			monthString = "" + month;
		}

		String lastTwoDigitsYr = ("" + year).substring(2, 4);
		String oneCharOfUserType = receiptAtType.substring(0, 1);

		int digitsOfOrgId = ("" + receiptAtOrgId).length();

		// get initial two digits for starting two digits of reciept type

		String startTwoDigitsForType = receiptType.substring(0, 2);

		int monthForLastRecieptNo = 0;
		if (lastRecieptGenerated != null) {
			if (receiptAtType.equals("AGENT")) {
				monthForLastRecieptNo = Integer.parseInt(lastRecieptGenerated
						.substring(5 + digitsOfOrgId, 7 + digitsOfOrgId));
			} else if (receiptAtType.equals("BO")) {
				monthForLastRecieptNo = Integer.parseInt(lastRecieptGenerated
						.substring(5, 7));
			}
		}
		logger.debug("month for which last receipt generated: "
				+ monthForLastRecieptNo);

		// get last generated number

		if (lastRecieptGenerated == null) {
			if (receiptAtType.equals("AGENT")) {
				autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
						+ receiptAtOrgId + lastTwoDigitsYr + monthString
						+ "000001";
			} else if (receiptAtType.equals("BO")) {
				autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
						+ lastTwoDigitsYr + monthString + "000001";
			}

			return autoGeneratedNo;

		} else if (monthForLastRecieptNo != month) {
			if (receiptAtType.equals("AGENT")) {
				autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
						+ digitsOfOrgId + lastTwoDigitsYr + monthString
						+ "000001";
			} else if (receiptAtType.equals("BO")) {
				autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
						+ lastTwoDigitsYr + monthString + "000001";
			}

			return autoGeneratedNo;

		}
		String lastGeneratedNumber = null;
		String nextGeneratedNumberString = null;

		if (receiptAtType.equals("AGENT")) {
			lastGeneratedNumber = lastRecieptGenerated
					.substring(7 + digitsOfOrgId);
		} else if (receiptAtType.equals("BO")) {
			lastGeneratedNumber = lastRecieptGenerated.substring(7);
		}

		int nextGeneratedNumber = Integer.parseInt(lastGeneratedNumber) + 1;
		nextGeneratedNumberString = "" + nextGeneratedNumber;

		while (nextGeneratedNumberString.length() < lastGeneratedNumber
				.length()) {
			nextGeneratedNumberString = "0" + nextGeneratedNumberString;
			logger.debug(nextGeneratedNumberString);
		}

		// make the whole reciept number
		if (receiptAtType.equals("AGENT")) {
			autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
					+ digitsOfOrgId + lastTwoDigitsYr + monthString
					+ nextGeneratedNumberString;
		} else if (receiptAtType.equals("BO")) {
			autoGeneratedNo = startTwoDigitsForType + oneCharOfUserType
					+ lastTwoDigitsYr + monthString + nextGeneratedNumberString;
		}
		// logger.debug("generated reciept number is " + autoGeneratedNo);
		return autoGeneratedNo;
	}
	
	public synchronized static String generateRequestIdIW(String recieptType, Connection connection) throws LMSException {
		String autoGeneratedNo = null;

		Calendar cal = Calendar.getInstance();
		int month = cal.get(Calendar.MONTH) + 1;
		int year = cal.get(Calendar.YEAR);
		String monthString = (month < 10) ? ("0"+month) : String.valueOf(month);

		String lastRecieptGenerated = null;

		Statement stmt = null;
		ResultSet rs = null;
		try {
			stmt = connection.createStatement();
			String getLastReqNo = "SELECT request_id FROM st_iw_approval_req_master ORDER BY request_id DESC LIMIT 1;";
			rs = stmt.executeQuery(getLastReqNo);
			if (rs.next()) {
				lastRecieptGenerated = rs.getString("request_id");
			}
		} catch (SQLException se) {
			se.printStackTrace();
			throw new LMSException(LMSErrors.SQL_EXCEPTION_ERROR_CODE);
		}

		String lastTwoDigitsYr = String.valueOf(year).substring(2, 4);
		String startThreeDigitsForType = recieptType.substring(0, 3);

		int monthForLastRecieptNo = (lastRecieptGenerated != null) ? Integer.parseInt(lastRecieptGenerated.substring(5, 7)) : 0;

		if (lastRecieptGenerated == null) {
			autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr + monthString + "000001";
			return autoGeneratedNo;
		} else if (monthForLastRecieptNo != month) {
			autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr + monthString + "000001";
			return autoGeneratedNo;
		}

		String lastGeneratedNumber = lastRecieptGenerated.substring(7);
		String nextGeneratedNumberString = String.valueOf(Integer.parseInt(lastGeneratedNumber) + 1);
		while (nextGeneratedNumberString.length() < lastGeneratedNumber.length()) {
			nextGeneratedNumberString = "0" + nextGeneratedNumberString;
		}

		autoGeneratedNo = startThreeDigitsForType + lastTwoDigitsYr + monthString + nextGeneratedNumberString;

		return autoGeneratedNo;
	}

}