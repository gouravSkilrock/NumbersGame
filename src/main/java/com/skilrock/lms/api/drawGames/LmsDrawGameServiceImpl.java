package com.skilrock.lms.api.drawGames;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts2.ServletActionContext;
import org.codehaus.xfire.transport.http.XFireServletController;

import com.skilrock.lms.api.beans.PanelBean;
import com.skilrock.lms.api.beans.TPKenoPurchaseBean;
//Generated by MyEclipse
import com.skilrock.lms.api.beans.TPLottoPurchaseBean;
import com.skilrock.lms.api.drawGamesImpl.APIUtility;
import com.skilrock.lms.api.drawGamesImpl.DrawGameAPIHelper;
import com.skilrock.lms.api.drawGamesImpl.KenoTwoAction;
import com.skilrock.lms.api.drawGamesImpl.ZimLottoBonusAction;
import com.skilrock.lms.beans.UserInfoBean;

public class LmsDrawGameServiceImpl implements ILmsDrawGameService {
	static Log logger = LogFactory.getLog(LmsDrawGameServiceImpl.class);
	
	public TPLottoPurchaseBean zimLottoBonusSale(TPLottoPurchaseBean zimLottoBonusBean){
		

		String userName = zimLottoBonusBean.getUserName();
		String password = zimLottoBonusBean.getPassword();
		String ip = XFireServletController.getRequest().getRemoteHost();
		String usrReqStr = "TP REQUEST bonusBallLottoSale=userName:" + userName
				+ "|pasword:" + password + "|ip:" + ip + "|";
		String resStr = "TP RESPONSE bonusBallLottoSale=|userName:" + userName;
		StringBuilder raffleData = new StringBuilder("#Raffle Data:");
		StringBuilder panelArr = new StringBuilder("#Panel Data:");
		String dataStr = "|gameCode:" + zimLottoBonusBean.getGameCode()
				+ "|Balance:" + zimLottoBonusBean.getBalance() + "|ErrorCode:"
				+ zimLottoBonusBean.getErrorCode() + "|AdvancedPlay:"
				+ zimLottoBonusBean.getIsAdvancedPlay() + "|LmsTranxId:"
				+ zimLottoBonusBean.getLmsTranxId() + "|MobileNumber:"
				+ zimLottoBonusBean.getMobileNumber() + "|NoOfDraws:"
				+ zimLottoBonusBean.getNoOfDraws() + "|NoPicked:"
				+ zimLottoBonusBean.getNoPicked() + "|PurchaseTime:"
				+ zimLottoBonusBean.getPurchaseTime() + "|RefTransId:"
				+ zimLottoBonusBean.getRefTransId() + "|TicketCost:"
				+ zimLottoBonusBean.getTicketCost() + "|TicketNumber:"
				+ zimLottoBonusBean.getTicketNumber() + "|TotalPurchaseAmt:"
				+ zimLottoBonusBean.getTotalPurchaseAmt();
		for (int i = 0; i < zimLottoBonusBean.getPickedNumbers().length; i++) {
			panelArr.append("|Pick Numbers:"
					+ zimLottoBonusBean.getPickedNumbers()[i]);
		}
		if (zimLottoBonusBean.isRaffle()) {
			raffleData.append("|isRaffle:" + zimLottoBonusBean.isRaffle()
					+ "|RaffleTicketNumber:"
					+ zimLottoBonusBean.getRaffleData().getTicketNumber());
		}
		logger.debug(usrReqStr + dataStr + panelArr + raffleData);
		UserInfoBean userBean = DrawGameAPIHelper.getUserData(userName);
		if (userBean != null) {
			if (APIUtility.validateUser(userBean, ip, password)) {
				HttpServletRequest request = XFireServletController
						.getRequest();
				request.setAttribute("code", "DG");
				request.setAttribute("interfaceType", "LMS_TERMINAL");
				ServletActionContext.setRequest(request);

				try {
					ZimLottoBonusAction.purchaseTicketProcess(
							zimLottoBonusBean, userBean);
					if ("100".equalsIgnoreCase(zimLottoBonusBean
							.getErrorCode())) {
						StringBuilder raffleData1 = new StringBuilder(
								"#Raffle Data:");
						StringBuilder panelArr1 = new StringBuilder(
								"#Panel Data:");
						String finalResp = "|gameCode:"
								+ zimLottoBonusBean.getGameCode()
								+ "|Balance:" + zimLottoBonusBean.getBalance()
								+ "|ErrorCode:"
								+ zimLottoBonusBean.getErrorCode()
								+ "|AdvancedPlay:"
								+ zimLottoBonusBean.getIsAdvancedPlay()
								+ "|LmsTranxId:"
								+ zimLottoBonusBean.getLmsTranxId()
								+ "|MobileNumber:"
								+ zimLottoBonusBean.getMobileNumber()
								+ "|NoOfDraws:"
								+ zimLottoBonusBean.getNoOfDraws()
								+ "|DrawDateTime:"
								+ zimLottoBonusBean.getDrawDateTime()
								+ "|NoPicked:"
								+ zimLottoBonusBean.getNoPicked()
								+ "|PurchaseTime:"
								+ zimLottoBonusBean.getPurchaseTime()
								+ "|RefTransId:"
								+ zimLottoBonusBean.getRefTransId()
								+ "|TicketCost:"
								+ zimLottoBonusBean.getTicketCost()
								+ "|TicketNumber:"
								+ zimLottoBonusBean.getTicketNumber()
								+ "|TotalPurchaseAmt:"
								+ zimLottoBonusBean.getTotalPurchaseAmt()
								+ "|TopAdMessageList:"
								+ zimLottoBonusBean.getTopAdMessageList()
								+ "|BottomAdMessageList:"
								+ zimLottoBonusBean.getBottomAdMessageList();
						for (int i = 0; i < zimLottoBonusBean
								.getPickedNumbers().length; i++) {
							panelArr1.append("|Pick Numbers:"
									+ zimLottoBonusBean.getPickedNumbers()[i]
									+ "|QpStatus:"
									+ zimLottoBonusBean.getQpStatus()[i]);
						}
						if (zimLottoBonusBean.isRaffle()) {
							raffleData1.append("|isRaffle:"
									+ zimLottoBonusBean.isRaffle()
									+ "|RaffleTicketNumber:"
									+ zimLottoBonusBean.getRaffleData()
											.getTicketNumber());
						}
						logger.debug(resStr + finalResp + panelArr1
								+ raffleData1);
					} else {
						logger.debug(resStr + "|ErrorCode:"
								+ zimLottoBonusBean.getErrorCode());
					}
				} catch (Exception e) {
					e.printStackTrace();
					zimLottoBonusBean.setSuccess(false);
					zimLottoBonusBean.setErrorCode("500");// internal server
					// error
					logger.debug(resStr + "|ErrorCode:"
							+ zimLottoBonusBean.getErrorCode());
					return zimLottoBonusBean;
				}

			} else {
				zimLottoBonusBean.setSuccess(false);
				zimLottoBonusBean.setErrorCode("102");// Invalid User
				logger.debug(resStr + "|ErrorCode:"
						+ zimLottoBonusBean.getErrorCode());
			}

		} else {
			zimLottoBonusBean.setSuccess(false);
			zimLottoBonusBean.setErrorCode("103");// Please call gameInfo first
			logger.debug(resStr + "|ErrorCode:"
					+ zimLottoBonusBean.getErrorCode());
			return zimLottoBonusBean;
		}
		return zimLottoBonusBean;
	
	}
	public TPKenoPurchaseBean kenoTwoSale(TPKenoPurchaseBean kenoTwoPurchaseBean){
		
		String userName = kenoTwoPurchaseBean.getUserName();
		String password = kenoTwoPurchaseBean.getPassword();
		String ip = XFireServletController.getRequest().getRemoteHost();
		String usrReqStr = "TP REQUEST kenoTwoSale=userName:" + userName
				+ "|pasword:" + password + "|ip:" + ip + "|";
		String resStr = "TP RESPONSE kenoTwoSale=|userName:" + userName;
		StringBuilder panelStr = new StringBuilder("#Panel Data");
		String dataStr = "|gameCode:" + kenoTwoPurchaseBean.getGameCode()
				+ "|Balance:" + kenoTwoPurchaseBean.getBalance() + "|ErrorCode:"
				+ kenoTwoPurchaseBean.getErrorCode() + "|LmsTranxId:"
				+ kenoTwoPurchaseBean.getLmsTranxId() + "|MobileNumber:"
				+ "|IsAdvancePlay:" + kenoTwoPurchaseBean.getIsAdvancePlay()
				+ kenoTwoPurchaseBean.getMobileNumber() + "|NoOfDraws:"
				+ kenoTwoPurchaseBean.getNoOfDraws() + "|DrawDateTimeList:"
				+ kenoTwoPurchaseBean.getDrawDateTimeList() + "|PurchaseTime:"
				+ kenoTwoPurchaseBean.getPurchaseTime() + "|RefTransId:"
				+ kenoTwoPurchaseBean.getRefTransId() + "|TicketCost:"
				+ kenoTwoPurchaseBean.getTicketCost() + "|TicketNumber:"
				+ kenoTwoPurchaseBean.getTicketNumber() + "|TotalPurchaseAmt:"
				+ kenoTwoPurchaseBean.getTotalPurchaseAmt() + "|TopAdMessageList:"
				+ kenoTwoPurchaseBean.getTopAdMessageList()
				+ "|BottomAdMessageList:"
				+ kenoTwoPurchaseBean.getBottomAdMessageList();
		if (kenoTwoPurchaseBean.getPanelList() != null
				&& kenoTwoPurchaseBean.getPanelList().size() > 0) {
			for (PanelBean panelBean : kenoTwoPurchaseBean.getPanelList()) {
				panelStr.append("|PickedNumbers:"
						+ panelBean.getPickedNumbers() + "|NoPicked:"
						+ panelBean.getNoPicked() + "|PlayType:"
						+ panelBean.getPlayType() + "|BetAmountMultiple:"
						+ panelBean.getBetAmountMultiple() + "|IsQp:"
						+ panelBean.getIsQp());
			}
		}
		logger.debug(usrReqStr + panelStr + dataStr);
		
		UserInfoBean userBean = DrawGameAPIHelper.getUserData(userName);
		if (userBean != null) {
			if (APIUtility.validateUser(userBean, ip, password)) {
				HttpServletRequest request = XFireServletController
						.getRequest();
				request.setAttribute("code", "DG");
				request.setAttribute("interfaceType", "TERMINAL");
				ServletActionContext.setRequest(request);
				KenoTwoAction.purchaseTicketProcess(kenoTwoPurchaseBean, userBean);
				if ("100".equalsIgnoreCase(kenoTwoPurchaseBean.getErrorCode())) {
					StringBuilder panelStr1 = new StringBuilder("#Panel Data");
					StringBuilder raffleData = new StringBuilder(
							"#Raffle Data:");
					String finalResp = "|gameCode:"
							+ kenoTwoPurchaseBean.getGameCode() + "|Balance:"
							+ kenoTwoPurchaseBean.getBalance() + "|ErrorCode:"
							+ kenoTwoPurchaseBean.getErrorCode() + "|LmsTranxId:"
							+ kenoTwoPurchaseBean.getLmsTranxId()
							+ "|MobileNumber:"
							+ kenoTwoPurchaseBean.getMobileNumber()
							+ "|NoOfDraws:" + kenoTwoPurchaseBean.getNoOfDraws()
							+ "|IsAdvancePlay:"
							+ kenoTwoPurchaseBean.getIsAdvancePlay()
							+ "|DrawDateTimeList:"
							+ kenoTwoPurchaseBean.getDrawDateTimeList()
							+ "|PurchaseTime:"
							+ kenoTwoPurchaseBean.getPurchaseTime()
							+ "|RefTransId:" + kenoTwoPurchaseBean.getRefTransId()
							+ "|TicketCost:" + kenoTwoPurchaseBean.getTicketCost()
							+ "|TicketNumber:"
							+ kenoTwoPurchaseBean.getTicketNumber()
							+ "|TotalPurchaseAmt:"
							+ kenoTwoPurchaseBean.getTotalPurchaseAmt()
							+ "|TopAdMessageList:"
							+ kenoTwoPurchaseBean.getTopAdMessageList()
							+ "|BottomAdMessageList:"
							+ kenoTwoPurchaseBean.getBottomAdMessageList();
					if (kenoTwoPurchaseBean.getPanelList() != null
							&& kenoTwoPurchaseBean.getPanelList().size() > 0) {
						for (PanelBean panelBean : kenoTwoPurchaseBean
								.getPanelList()) {
							panelStr1.append("|PickedNumbers:"
									+ panelBean.getPickedNumbers()
									+ "|NoPicked:" + panelBean.getNoPicked()
									+ "|PlayType:" + panelBean.getPlayType()
									+ "|BetAmountMultiple:"
									+ panelBean.getBetAmountMultiple()
									+ "|IsQp:" + panelBean.getIsQp());
						}
					}
					if (kenoTwoPurchaseBean.isRaffle()) {
						raffleData.append("|isRaffle:"
								+ kenoTwoPurchaseBean.isRaffle()
								+ "|RaffleTicketNumber:"
								+ kenoTwoPurchaseBean.getRaffleData()
										.getTicketNumber());
					}
					logger.debug(resStr + panelStr1 + finalResp + raffleData);
				} else {
					logger.debug(resStr + "|ErrorCode:"
							+ kenoTwoPurchaseBean.getErrorCode());
				}

			} else {
				kenoTwoPurchaseBean.setSuccess(false);
				kenoTwoPurchaseBean.setErrorCode("102");// Invalid User
				logger.debug(resStr + "|ErrorCode:"
						+ kenoTwoPurchaseBean.getErrorCode());
			}
		} else {
			kenoTwoPurchaseBean.setSuccess(false);
			kenoTwoPurchaseBean.setErrorCode("103");// Please call gameInfo first
			logger.debug(resStr + "|ErrorCode:"
					+ kenoTwoPurchaseBean.getErrorCode());
			return kenoTwoPurchaseBean;
		}

		return kenoTwoPurchaseBean;
		
		
	}
}